---
import type { TreeNode } from "@/lib/types";
import { cn } from "@/lib/utils";
import { Icon } from "astro-icon/components";

const INDENT = 12;
const DEFAULT_INDENT = 26;

interface Props {
  tree: Array<TreeNode>;
  indent?: number;
}

const { tree, indent = DEFAULT_INDENT } = Astro.props;

const pathname = new URL(Astro.request.url).pathname.slice(1);
---

<div class="space-y-1 w-full">
  {
    tree.map((node) => {
      if (node.children) {
        return (
          <label class="collapse relative h-min">
            <input
              type="checkbox"
              class="peer hidden pointer-events-none relative z-10"
              transition:persist
            />
            <div
              class="capitalize peer-checked:[&>span>svg]:rotate-90 text-muted-foreground hover:text-foreground py-1 h-min hover:bg-gray-600/5 rounded-lg collapse-title"
              style={{ paddingLeft: indent + "px" }}
            >
              <span class="relative">
                <Icon
                  name="tabler:chevron-right"
                  size={18}
                  class="absolute -left-[20px] top-1/2 -translate-y-1/2 duration-200"
                />
                {node.name.replaceAll("-", " ")}
              </span>
            </div>
            <div class="collapse-content mt-1">
              <Astro.self tree={node.children} indent={indent + INDENT} />
            </div>
          </label>
        );
      }

      return (
        <a
          href={`/${node.path}`}
          class={cn(
            "block py-1 px-3 hover:bg-gray-600/5 rounded-lg capitalize text-muted-foreground hover:text-foreground",
            pathname === node.path &&
              pathname !== "" &&
              pathname !== "/" &&
              "bg-primary text-primary-foreground leading-snug hover:text-primary-foreground hover:bg-primary",
          )}
          style={{ paddingLeft: indent + "px" }}
        >
          {node.name.replaceAll("-", " ")}
        </a>
      );
    })
  }
</div>

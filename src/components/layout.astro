---
import "../styles/global.css";
import { getCollection } from "astro:content";
import { ViewTransitions } from "astro:transitions";
import { cn } from "@/lib/utils";
import SetTheme from "../components/set-theme.astro";
import Sidebar from "../components/sidebar.astro";
import { buildTree } from "@/lib/build-tree";
import { SEO } from "astro-seo";
import { AstroFont } from "astro-font";

const contents = await getCollection("obsidian");

const allIds = contents.map((item) => item.id.replace(".md", ""));

const tree = buildTree(allIds);

const { minutesRead, status, title, description } = Astro.props;

// remove the last slash
const pathname = new URL(Astro.request.url).pathname.slice(0, -1);
const isNotFound = status === 404;

const ogPath = isNotFound
  ? "/404.jpeg"
  : pathname.length < 2
    ? "/og.png"
    : `/open-graph${pathname}.png`;
---

<html lang="en">
  <head>
    <SEO
      title={title}
      description={description}
      openGraph={{
        basic: {
          title: title,
          type: "article",
          image: ogPath,
        },
        article: {
          authors: ["rinyato", "chearithorn"],
        },
        optional: {
          description: description,
        },
      }}
      twitter={{
        creator: "@chearithorn",
        card: "summary_large_image",
        title: title,
        site: "https://vault.rinyato.com",
        image: ogPath,
        description: description,
      }}
      extend={{
        // extending the default link tags
        link: [{ rel: "icon", href: "/favicon.png" }],
      }}
    />

    <SetTheme />
    <ViewTransitions />

    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <AstroFont
      config={[
        {
          name: "iA Writer Duo",
          src: [
            {
              style: "variable",
              path: "./public/fonts/sans.ttf",
            },
          ],
          preload: true,
          display: "swap",
          selector: "body",
          fallback: "sans-serif",
        },
        {
          name: "iA Writer Mono",
          src: [
            {
              style: "variable",
              path: "./public/fonts/mono.ttf",
            },
          ],
          preload: true,
          display: "swap",
          selector: "body",
          fallback: "serif",
        },
      ]}
    />
  </head>
  <body class="min-h-dvh lg:flex overflow-x-clip">
    <Sidebar tree={tree} minutesRead={minutesRead} />
    <main class="p-5 md:px-8 lg:px-20 mx-auto pb-36 flex-1">
      <article
        class={cn(
          "mx-auto prose prose-everforest w-full max-w-3xl",
          "prose-headings:text-xl md:prose-headings:text-2xl prose-headings:font-bold",
          "prose-h3:text-base md:prose-h3:text-xl",
          "prose-p:text-base md:prose-p:text-xl prose-p:!leading-[1.7] prose-li:!leading-[1.7]",
          "hover:prose-a:brightness-90",
          "prose-li:text-lg md:prose-li:text-xl prose-ol:ml-5",
          "prose-li:has-[input]:list-none",
          "prose-blockquote:font-normal prose-blockquote:not-italic",
          "mt-6 [&>:last-child]:mt-16",
          "prose-h2:mt-20",
          "prose-code:text-sm md:prose-code:text-lg prose-pre:rounded-2xl",
          "prose-img:rounded-2xl",
        )}
      >
        <slot />
      </article>
    </main>
    <script>
      function createCopyButtons() {
        const codeFigure = document.querySelectorAll(
          "figure[data-rehype-pretty-code-figure]",
        );

        codeFigure.forEach((figure) => {
          figure.classList.add("group");
          const firstChild = figure.firstChild! as HTMLElement;

          const copyButton = document.createElement("button");
          copyButton.textContent = "Copy";
          copyButton.classList.add(
            "bg-background",
            "appearance-none",
            "text-base",
            "px-3",
            "py-1",
            "rounded-lg",
            "duration-200",
            "opacity-0",
            "group-hover:opacity-100",
            "hover:text-primary",
            "text-foreground",
            "absolute",
            "top-2",
            "right-2",
          );

          const rawCode =
            figure.querySelector("code")?.innerText ??
            "something went wrong, and i don't know what it is ðŸ˜‚";

          copyButton.addEventListener("click", () => {
            navigator.clipboard.writeText(rawCode);
            copyButton.textContent = "Copied!";

            setTimeout(() => {
              copyButton.textContent = "Copy";
            }, 2000);
          });

          firstChild.appendChild(copyButton);
          firstChild.classList.add("relative");
        });
      }

      createCopyButtons();

      document.addEventListener("astro:after-swap", () => {
        createCopyButtons();
      });
    </script>
    <script
      is:inline
      data-astro-rerun
      defer
      src="https://cloud.umami.is/script.js"
      data-website-id="f042a811-69bd-4f88-808f-3c8175ca41c2"></script>
  </body>
</html>
